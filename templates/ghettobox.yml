host: ghettobox.example.com
vars:
  # The username to connect to the server and run the deploy logic as.
  # Needs to be able to escalate privileges via sudo, and connect to the pi server
  # via SSH public key authentication.
  gb_user: example_username

  # Location for ghettobox services to store docker volumes and other persistent
  # data
  gb_root: ~/ghettobox

  # Configure nginx reverse proxy to host on 443, with SSL certs
  gb_enable_ssl: true

  # Path to full cert chain and key on the server
  #
  # NOTE acme.sh is highly recommended for simple and easy automatic letsencrypt
  # cert renewals
  ssl_cert_chain_file: ~/.acme.sh/ghettobox.example.com/fullchain.cer
  ssl_cert_key_file: ~/.acme.sh/ghettobox.example.com/ghettobox.example.com.key


  # Timezone for services like scheduled backups and updates
  local_timezone: Europe/London

  # Private IP address range for the server's local area network
  local_subnet: "192.168.0.0/16"

  # Controls whether or not the provisioner will deny connections on all ports
  # not explicitly allowed from LAN/WAN in enabled ghettobox modules on the server
  # Enabled with default answer "yes", but you might want to change it to "no" if
  # the server is already hosting services and/or has a reasonably secure
  # firewall configuration to accomodate them.
  lockdown_firewall: true

  # Whether or not to allow HTTPS connections on port 443 from the internet
  allow_https_from_anywhere: true

  # Whether or not to allow SSH connections on port 22 from the internet
  allow_ssh_from_anywhere: true

services:
  - name: filebrowser
    enabled: true
    vars:
      # Root path for the user to be able to browse via the filebrowser service
      filebrowser_root_path: "{{ gb_root }}/share"

  - name: navidrome
    enabled: true
    vars:
      # Path to music files for the navidrome service
      navidrome_music_path: "{{ gb_root }}/share/music"

  - name: samba
    enabled: true
    vars:
      # Path to the samba share on the server
      samba_share_path: "{{ gb_root }}/net"

      # Username and password for the samba user, written into encrypted
      # smbpasswd file on provisioner creation
      samba_user: !smbpasswd
        username: "{{ gb_user }}"
        passwd: badpasswd

      # Configuration options for the samba share.
      #
      # Volume mount point for {{ share_path }} will be '/samba' inside the container
      # unless you modify the docker-compose file, so you probably don't want to change
      # that unless you know what you're doing.
      #
      # From the 'help' text from samba.sh:
      # "<name;/path>[;browse;readonly;guest;users;admins;writelist;comment]"
      #               Configure a share
      #               required arg: "<name>;</path>"
      #               <name> is how it's called for clients
      #               <path> path to share
      #               NOTE: for the default values, just leave blank
      #               [browsable] default:'yes' or 'no'
      #               [readonly] default:'yes' or 'no'
      #               [guest] allowed default:'yes' or 'no'
      #               NOTE: for user lists below, usernames are separated by ','
      #               [users] allowed default:'all' or list of allowed users
      #               [admins] allowed default:'none' or list of admin users
      #               [writelist] list of users that can write to a RO share
      #               [comment] description of share
      samba_share_config: "ghettobox;/samba;yes;no;no;{{ gb_user }}"

  - name: radicale
    enabled: true
    vars:
      # Path to the samba share on the server
      radicale_user: !htpasswd
        username: "{{ gb_user }}"
        passwd: badpasswd

  - name: restic
    enabled: true
    vars:
      # Source directory which restic will backup
      restic_backup_src: "{{ gb_root }}"

      # Location where restic will store backups
      restic_backup_path: "/backups/ghettobox"

      # Schedule for restic to create backups, in 6-field cron syntax
      restic_backup_schedule: "0 0 3 * * *"

      # Schedule for restic to prune old backups
      restic_prune_schedule: "0 30 3 * * *"

      # Number of old backups to keep
      restic_keep_last: 10

  - name: watchtower
    enabled: true
    vars:
      # Schedule for watchtower to check for and apply base image updates,
      # in 6-field cron syntax
      watchtower_schedule: "0 0 4 */14 * *"
