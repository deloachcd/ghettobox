[[./img/ghettobox.png]]

* ghettobox
** What is this?
This is my personal solution for automating a large portion of the
provisioning work involved in setting up my primary home server to act
as:
- a NAS via Samba
- self-hosted Spotify via Navidrome
- self-hosted Google drive via Filebrowser
- an "always on" remote BitTorrent session via Transmission, Gluetun

It also provides:
- automatic backups via Restic
- a reverse proxy for web services with automatic HTTPS via Caddy

These services are all provisioned as docker containers launched from
a single ~docker-compose.yml~ file on the server, with their state ideally
being confined to a ~volumes~ directory within a user-defined
~gb_root~ path on the server.

** Setup
*** Pre-requisites
- Server running a currently supported version of [[https://www.debian.org/][Debian]]
- [[https://docs.docker.com/engine/install/debian/][Docker Engine]] installed on server, ~docker-compose~ installed for service user
- ~python3-venv~ or equivalent installed on client PC where repo is cloned
- A user account on the Debian server with ~sudo~ permissions, able to SSH via keyauth, able to manage docker containers
  
*** Steps
1. Clone this repo and navigate to the root directory
2. Run ~./script/init.sh~ to create 
3. Set configuration options for the server configuration on the client-side in ~user/ghettobox.yml~
4. Now, generate the provisioner with ~./script/generate.sh~
5. If all goes well, the provisioner can be run with: ~cd ansible && ./provision.sh~
6. If everything in the provisioner, SSH into the host and ~cd~ to the directory specified as ~gb_root~ in ~user/ghettobox.yml~
7. Services should be able to be brought up in a ~tmux~ session with the included script, ~launcher.sh~
