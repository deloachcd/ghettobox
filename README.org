[[./img/ghettobox.png]]

* ghettobox
** What is this?
This is my personal solution for automating a large portion of the provisioning work
involved in setting up a personal server to act as an internet-connected jukebox/private
Spotify and Google Drive replacement. It automates where it makes sense to, but does
not automate things like installing Docker for its containerized services or setting up
automatic SSL certificate renewal for common DNS providers.

Instead of comprehensively automating, this software aims to cut down the
work involved in:
- locking down the firewall
- writing an nginx config
- writing a docker-compose file
- writing Ansible (or manually creating/modifying files and directories over SSH)
- writing fail2ban filters and jails

Instead, service provisioning is configured primarily through a single file, ~ghettobox.yml~,
which is used to generate Ansible code to do the bulk of the provisioning. Its up to the user
to SSH in, make any desired adjustments (if necessary) and bring the services up once it's
done its thing.
** Setup
*** Pre-requisites
- Server running a currently supported version of [[https://www.debian.org/][Debian]]
- [[https://docs.docker.com/engine/install/debian/][Docker Engine]] installed on server, ~docker-compose~ installed for service user
- ~python3-venv~ or equivalent installed on client PC where repo is cloned
- A user account on the Debian server with ~sudo~ permissions, able to SSH via keyauth, able to manage docker containers
- [[https://certbot.eff.org/][Certbot]] or [[https://github.com/acmesh-official/acme.sh][acme.sh]] (recommended) set up and automatically retrieving fresh SSL certs through a cron job
  
*** Steps
1. Clone this repo and navigate to the root directory
2. Run ~./script/init.sh~
3. Set configuration options for the server configuration on the client-side in ~user/ghettobox.yml~
4. Now, generate the provisioner with ~./script/generate.sh~
5. If all goes well, the provisioner can be run with: ~cd ansible && ./provision.sh~
6. If everything in the provisioner, SSH into the host and ~cd~ to the directory specified as ~gb_root~ in ~user/ghettobox.yml~
7. Services should be able to be brought up in a ~tmux~ session with the included script, ~launcher.sh~
