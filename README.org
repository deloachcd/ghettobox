[[./img/ghettobox.png]]

* ghettobox
** What is this?
This is my personal solution for automating a large portion of the
work involved in setting up my primary home server to act as:
- a NAS via Samba
- self-hosted Spotify via Navidrome
- self-hosted Netflix via Jellyfin
- self-hosted Google drive via Filebrowser
- an "always on" remote BitTorrent session via Transmission
- a P2P file-sharing server via Soulseek
- a calDAV calendar via Baikal

It also provides:
- automatic backups via Restic
- a reverse proxy for web services with automatic HTTPS via Caddy
- a VPN connection which other services can use via Gluetun

These services are all provisioned as docker containers launched from
a single ~docker-compose.yml~ file on the server, for the sake of
making provisioning and administration as painless as possible.

*** Who is this repo useful for?
- me (obviously), as I use it to provision my home server
- anyone who wants copy my home server setup almost exactly
- anyone who wants to fork this repo and do something similar
- anyone who wants a reference for a simple automated setup like this

** Setup
*** Pre-requisites
- Server running a currently supported version of [[https://www.debian.org/][Debian]]
- [[https://docs.docker.com/engine/install/debian/][Docker Engine]] installed on server, ~docker-compose~ installed for service user
- ~python3-venv~ or equivalent installed on client PC where repo is cloned
- A user account on the Debian server with ~sudo~ permissions, able to SSH via keyauth, able to manage docker containers
  
*** Steps
1. Clone this repo and navigate to the root directory
2. Run ~./script/init.sh~ from project root to populate the ~user/~
   directory, where the bulk of configuration will occur
3. Set configuration options for the desired containerized services
   using the files described in the "Configuration" section below
4. Once everything looks good, run the provisioner with ~./script/provision.sh~
5. Assuming provisioning went well, SSH into the host and ~cd~ to the
   directory specified as ~gb_root~ in ~user/inventory.yml~
6. Services should be able to be brought up in a ~tmux~ session with
   the included script, ~launcher.sh~

** Configuration
There are six main files which are used to configure the provisioner 
outside of modifying Ansible roles directly:
| file                    | role                                                                |
|-------------------------+---------------------------------------------------------------------|
| ~inventory.yml~         | set configuration options through named inventory variables         |
| ~secrets.yml~           | same as above, but for more sensitive values                        |
| ~main.yml~              | control which roles will run by commenting them out (or not)        |
| ~Caddyfile~             | control the behavior of the reverse proxy for web-facing containers |
| ~docker-compose.yml~    | control the behavior of the containers themselves                   |
| ~samba-config.yml~      | define users and shares for samba                                   |
